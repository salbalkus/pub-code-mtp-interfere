---
title: "Simulation Plots for The Causal Effects of Modified Treatment Policies Under Network Interference"
format: html
---

This Quarto notebook produces publication-ready plots for the *simulation* section of Balkus, Delaney, and Hejazi (2025) "The Causal Effects of Modified Treatment Policies Under Network Interference". See the top-level `simulations` folder for the actual code to produce results.

First, we load the data and necessary packages.

```{r}
library(here)
library(tidyverse)
library(stargazer)
library(ggh4x)
library(ggpubr)


```

## Load synthetic data results

This code loads the results of the synthetic data simulation, cleans and processes them into a format usable by `ggplot`, and saves the plots. 

```{r}
network_names = c("er-super-fast", "sf-super-fast", "ws-super-fast")
network_names_full = c(`er-super-fast` = "Erdős-Rényi", `sf-super-fast` = "Scale-Free", `ws-super-fast` = "Watts-Strogatz")

here("data", paste0("summary-synthetic-3-stepwise-trunc.jl-", network_names[1], ".csv"))

read_simulation_result <- function(x){
  df = read_csv(here("data", paste0("summary-synthetic-3-stepwise-trunc.jl-", x, ".csv")))
  df$network = x
  return(df)
}

df = bind_rows(lapply(network_names, read_simulation_result))

```
```{r}
labels = c("`% Bias`", "`√Cₙ·|Bias|`", "`Cₙ·MSE`", "`Coverage`")

truevars = read_csv(here("data", paste0("graph_variances.csv"))) %>%
  pivot_longer(c("er", "ws", "sf"))
truevars$name = factor(truevars$name, 
                  c("er", "sf", "ws"),
                  labels = c(er = "Erdős-Rényi", sf = "Scale-Free", ws = "Watts-Strogatz"))
truevars$value = truevars$value / (log(truevars$samples)^2)
```



```{r}

df$scaled_bias = abs(df$scaled_bias)
df2 = df %>% 
  mutate(scaled_bias = scaled_bias, scaled_mse = scaled_mse, pct_bias = 100 * pct_bias) %>%
  pivot_longer(all_of(c("pct_bias", "scaled_bias", "scaled_mse", "coverage"))) %>% 
  select(samples, method, name, value, network) %>%
  filter(method %in% c("tmle"))

df2$name = factor(df2$name, 
                  c("pct_bias", "scaled_bias", "scaled_mse", "coverage"), 
                  labels = labels)

df2$network = factor(df2$network,
                    network_names,
                    labels = network_names_full)

df2$method = factor(df2$method,
                    c("tmle"),
                    labels = c(tmle = "Network-TMLE"))


```

## Create synthetic data simulation plots
```{r}

theme_set(theme_light(base_size = 10))
#df2$value_jitter = df2$value
#vals_to_jitter = grepl("log(", df2$name, fixed = T)
#df2$value_jitter[vals_to_jitter] = jitter(df2$value[vals_to_jitter], factor = 1000)
sample_breaks = c(100, 400, 900, 1600)

dotsize = 2
linewidth = 0.6
p1 = ggplot(df2 %>% filter(name == "`% Bias`")) + 
  geom_hline(aes(yintercept = 0), color = "gray", linewidth = linewidth) + 
  geom_line(aes(x = samples, y = value, color = network, linetype = "Estimate"), linewidth = linewidth, show.legend=TRUE) +
  geom_point(aes(x = samples, y = value, color = network), size = dotsize) + 
  ylab("% Bias") + xlab("Sample Size") + labs(color = "") +
  scale_color_manual(values = c("#002e5c", "#ffa600", "#00aaf5")) + 
  theme(strip.background = element_rect("#EEEEEE", "#d1d1d1"), 
        strip.text = element_text(colour = 'black'), legend.key.size = unit(0.8, "cm")) +
  scale_x_continuous(breaks = sample_breaks) +
  scale_linetype_manual(name = "", values = c("Efficiency Bound" = "dashed", "Estimate" = "solid"), limits = c("Estimate", "Efficiency Bound"))

p2 = ggplot(df2 %>% filter(name == "`√Cₙ·|Bias|`")) + 
  geom_line(aes(x = samples, y = value, color = network, linetype = "Estimate"), linewidth = linewidth, show.legend = TRUE) +
  geom_point(aes(x = samples, y = value, color = network), size=dotsize) + 
  ylab("√Cₙ·|Bias|") + xlab("Sample Size") + labs(color = "") +
  scale_color_manual(values = c("#002e5c", "#ffa600", "#00aaf5")) + 
  theme(strip.background = element_rect("#EEEEEE", "#d1d1d1"), 
        strip.text = element_text(colour = 'black')) +
  scale_x_continuous(breaks = sample_breaks) +
  scale_linetype_manual(name = "", values = c("Efficiency Bound" = "dashed", "Estimate" = "solid"), limits = c("Estimate", "Efficiency Bound"))

p3 = ggplot(df2 %>% filter(name == "`Cₙ·MSE`")) + 
  geom_line(aes(x = samples, y = value, color = name, linetype = "Efficiency Bound"), data = truevars, linewidth = linewidth, show.legend = TRUE) + 
  geom_line(aes(x = samples, y = value, color = network, linetype = "Estimate"), linewidth = linewidth, show.legend = TRUE) +
  geom_point(aes(x = samples, y = value, color = network), size=dotsize) + 
  ylab("Cₙ·MSE") + xlab("Sample Size") + labs(color = "") +
  scale_color_manual(values = c("#002e5c", "#ffa600", "#00aaf5")) + 
  theme(strip.background = element_rect("#EEEEEE", "#d1d1d1"), 
        strip.text = element_text(colour = 'black')) +
  scale_x_continuous(breaks = sample_breaks) +
  scale_linetype_manual(name = "", values = c("Efficiency Bound" = "dashed", "Estimate" = "solid"), limits = c("Estimate", "Efficiency Bound"))

p4 = ggplot(df2 %>% filter(name == "`Coverage`")) + 
  geom_hline(aes(yintercept = 0.95), linewidth = linewidth, color = "gray") + 
  geom_line(aes(x = samples, y = value, color = network, linetype = "Estimate"), linewidth = linewidth, show.legend = TRUE) +
  geom_point(aes(x = samples, y = value, color = network), size = dotsize) + 
  ylab("Coverage") + xlab("Sample Size") + labs(color = "") +
  ylim(0.5,1) + 
  scale_color_manual(values = c("#002e5c", "#ffa600", "#00aaf5")) + 
  theme(strip.background = element_rect("#EEEEEE", "#d1d1d1"), 
        strip.text = element_text(colour = 'black')) +
  scale_x_continuous(breaks = sample_breaks) +
  scale_linetype_manual(name = "", values = c("Efficiency Bound" = "dashed", "Estimate" = "solid"), limits = c("Estimate", "Efficiency Bound"))

p = ggarrange(p1, p2, p3, p4, common.legend = TRUE, legend="bottom")
ggsave("sim-result.png", p, path = here("results"), width = 6, height = 4.5, dpi = 1000, bg = 'white')

p


```

## Create tables for semi-synthetic data results

First we create the table for the main text.
```{r}
df = read_csv(here("data", "semisynthetic-summary-α=-2.0.csv"))[c(1, 4, 3, 2), ]

df$method = c("Network TMLE", "Network TMLE", "Classical TMLE", "Linear Regression")
df$learner = c("Correct GLM", "Super Learner", "Correct GLM", "Correct GLM")
df$pct_bias = df$pct_bias * 100
df$coverage = df$coverage * 100

df = df %>% select(method, learner, pct_bias, variance, coverage, ci_width)
colnames(df) = c("Method", "Learner", "Bias (%)", "Variance", "Coverage (%)", "CI Width")

stargazer(as.data.frame(df), summary=FALSE)

```

Then, we create alternative tables to show the bias-variance tradeoff.

```{r}
df = read_csv(here("data", "semisynthetic-summary-α=-5.0.csv"))[c(1, 4, 3, 2), ]

df$method = c("Network TMLE", "Network TMLE", "Classical TMLE", "Linear Regression")
df$learner = c("Correct GLM", "Super Learner", "Correct GLM", "Correct GLM")
df$pct_bias = df$pct_bias * 100
df$coverage = df$coverage * 100

df = df %>% select(method, learner, pct_bias, variance, coverage, ci_width)
colnames(df) = c("Method", "Learner", "Bias (%)", "Variance", "Coverage (%)", "CI Width")

stargazer(as.data.frame(df), summary=FALSE)
```

```{r}
df = read_csv(here("data", "semisynthetic-summary-α=3.0.csv"))[c(1, 4, 3, 2), ]

df$method = c("Network TMLE", "Network TMLE", "Classical TMLE", "Linear Regression")
df$learner = c("Correct GLM", "Super Learner", "Correct GLM", "Correct GLM")
df$pct_bias = df$pct_bias * 100
df$coverage = df$coverage * 100

df = df %>% select(method, learner, pct_bias, variance, coverage, ci_width)
colnames(df) = c("Method", "Learner", "Bias (%)", "Variance", "Coverage (%)", "CI Width")
stargazer(as.data.frame(df), summary=FALSE)
```

