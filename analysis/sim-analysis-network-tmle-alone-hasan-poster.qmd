---
title: "Analyzing Simulation Output"
format: html
---

```{r}
library(here)
library(tidyverse)
library(stargazer)
library(ggh4x)
library(ggpubr)


```

## Synthetic

```{r}
network_names = c("er-super-fast", "sf-super-fast", "ws-super-fast")
network_names_full = c(`er-super-fast` = "Erdős-Rényi", `sf-super-fast` = "Scale-Free", `ws-super-fast` = "Watts-Strogatz")

here("data", paste0("summary-synthetic-3-stepwise-trunc.jl-", network_names[1], ".csv"))

read_simulation_result <- function(x){
  df = read_csv(here("data", paste0("summary-synthetic-3-stepwise-trunc.jl-", x, ".csv")))
  df$network = x
  return(df)
}

df = bind_rows(lapply(network_names, read_simulation_result))
df = df %>% filter(network %in% c("ws-super-fast", "sf-super-fast"))
```
```{r}
labels = c("`% Bias`", "`√n·|Bias|`", "`n·MSE`", "`Coverage`", "`Variance`")


truthdf = read_csv(here("data", paste0("synthetic-truth.csv"))) %>% 
  #mutate(scaled_mse = 0) %>%
  filter(structure == "synthetic-3-stepwise-trunc.jl") %>%
  pivot_longer(all_of(c("bias", "scaled_bias", "scaled_mse", "coverage")))

truthdf$name = factor(truthdf$name, 
                  c("bias", "scaled_bias", "scaled_mse", "coverage"), 
                  labels = labels)
truthdf$network = factor(truthdf$network,
                    network_names,
                    labels = network_names_full)

```



```{r}

df$scaled_bias = abs(df$scaled_bias)
df2 = df %>% 
  mutate(scaled_bias = scaled_bias / log(samples) / sqrt(samples), scaled_mse = scaled_mse / log(samples)^2 / samples, pct_bias = 100 * pct_bias, variance = variance) %>%
  pivot_longer(all_of(c("pct_bias", "scaled_bias", "scaled_mse", "coverage", "variance"))) %>% 
  select(samples, method, name, value, network) %>%
  filter(method %in% c("tmle"))

df2$name = factor(df2$name, 
                  c("pct_bias", "scaled_bias", "scaled_mse", "coverage", "variance"), 
                  labels = labels)

df2$network = factor(df2$network,
                    network_names,
                    labels = network_names_full)

df2$method = factor(df2$method,
                    c("tmle"),
                    labels = c(tmle = "Network-TMLE"))


```

## Alternate approach
```{r}

theme_set(theme_light(base_size = 10))
#df2$value_jitter = df2$value
#vals_to_jitter = grepl("log(", df2$name, fixed = T)
#df2$value_jitter[vals_to_jitter] = jitter(df2$value[vals_to_jitter], factor = 1000)

p1 = ggplot(df2 %>% filter(name == "`% Bias`")) + 
  geom_hline(aes(yintercept = value), color = "gray", data = truthdf %>% filter(name == "`% Bias`")) + 
  geom_line(aes(x = samples, y = value, color = network), linewidth = 0.5) +
  geom_point(aes(x = samples, y = value, color = network)) + 
  ylab("% Bias") + xlab("Sample Size") + labs(color = "") +
  scale_color_manual(values = c("#002e5c", "#ffa600", "#00aaf5")) + 
  theme(strip.background = element_rect("#EEEEEE", "#d1d1d1"), 
        strip.text = element_text(colour = 'black')) +
  scale_x_continuous(breaks = c(100,400, 900, 1600, 2500))

p3 = ggplot(df2 %>% filter(name == "`Variance`")) + 
  geom_line(aes(x = samples, y = value, color = network), linewidth = 0.5) +
  geom_point(aes(x = samples, y = value, color = network)) + 
  ylab("Variance") + xlab("Sample Size") + labs(color = "") +
  scale_color_manual(values = c("#002e5c", "#ffa600", "#00aaf5")) + 
  theme(strip.background = element_rect("#EEEEEE", "#d1d1d1"), 
        strip.text = element_text(colour = 'black')) +
  scale_x_continuous(breaks = c(100,400, 900, 1600, 2500))

p = ggarrange(p1, p3, ncol = 1, common.legend = TRUE, legend="bottom")
ggsave("hasan-sim-result.png", p, path = here("results"), width = 3, height = 6, dpi = 400)

p


```


```{r}

theme_set(theme_light(base_size = 10))
#df2$value_jitter = df2$value
#vals_to_jitter = grepl("log(", df2$name, fixed = T)
#df2$value_jitter[vals_to_jitter] = jitter(df2$value[vals_to_jitter], factor = 1000)

p1 = ggplot(df2) + 
  geom_hline(aes(yintercept = value), color = "gray", data = truthdf) + 
  geom_line(aes(x = samples, y = value, color = network), linewidth = 0.5) +
  geom_point(aes(x = samples, y = value, color = network)) + 
  facet_wrap(vars(name), labeller=label_parsed, scales = "free_y", switch="both") + 
  ylab("") + xlab("Sample Size") + labs(color = "") +
  scale_color_manual(values = c("#002e5c", "#ffa600", "#00aaf5")) + 
  theme(strip.background = element_rect("#EEEEEE", "#d1d1d1"), 
        strip.text = element_text(colour = 'black'), 
        legend.position = "bottom",legend.title=element_blank(), 
        legend.margin=margin(-10,0,0,0),
        panel.spacing = unit(15, "pt")) +
  scale_x_continuous(breaks = c(100, 900, 2500)) + 
  ggh4x::facetted_pos_scales(y = list(
  name == "`Coverage`" ~ scale_y_continuous(limits = c(0.0, 1.0))
))

ggsave("sim-result.png", p1, path = here("results"), width = 6, height = 6, dpi = 400)

p1

```

## Semi-Synthetic

First we create the table for the main text.
```{r}
df = read_csv(here("data", "semisynthetic-summary-α=-2.0.csv"))[c(1, 4, 3, 2), ]

df$method = c("Network TMLE", "Network TMLE", "Classical TMLE", "Linear Regression")
df$learner = c("Correct GLM", "Super Learner", "Correct GLM", "Correct GLM")
df$pct_bias = df$pct_bias * 100
df$coverage = df$coverage * 100

df = df %>% select(method, learner, pct_bias, variance, coverage, ci_width)
colnames(df) = c("Method", "Learner", "Bias (%)", "Variance", "Coverage (%)", "CI Width")

stargazer(as.data.frame(df), summary=FALSE)

```

Then, we create alternative tables to show the bias-variance tradeoff.

```{r}
df = read_csv(here("data", "semisynthetic-summary-α=-5.0.csv"))[c(1, 4, 3, 2), ]

df$method = c("Network TMLE", "Network TMLE", "Classical TMLE", "Linear Regression")
df$learner = c("Correct GLM", "Super Learner", "Correct GLM", "Correct GLM")
df$pct_bias = df$pct_bias * 100
df$coverage = df$coverage * 100

df = df %>% select(method, learner, pct_bias, variance, coverage, ci_width)
colnames(df) = c("Method", "Learner", "Bias (%)", "Variance", "Coverage (%)", "CI Width")

stargazer(as.data.frame(df), summary=FALSE)
```

```{r}
df = read_csv(here("data", "semisynthetic-summary-α=3.0.csv"))[c(1, 4, 3, 2), ]

df$method = c("Network TMLE", "Network TMLE", "Classical TMLE", "Linear Regression")
df$learner = c("Correct GLM", "Super Learner", "Correct GLM", "Correct GLM")
df$pct_bias = df$pct_bias * 100
df$coverage = df$coverage * 100

df = df %>% select(method, learner, pct_bias, variance, coverage, ci_width)
colnames(df) = c("Method", "Learner", "Bias (%)", "Variance", "Coverage (%)", "CI Width")
stargazer(as.data.frame(df), summary=FALSE)
```

## One-step

```{r}
df$scaled_bias = abs(df$scaled_bias)
df2 = df %>% 
  pivot_longer(all_of(c("pct_bias", "scaled_bias", "scaled_mse", "coverage"))) %>% 
  select(samples, method, name, value, network) %>%
  filter(method %in% c("onestep", "onestep_iid", "ols"))

df2$name = factor(df2$name, 
                  c("pct_bias", "scaled_bias", "scaled_mse", "coverage"), 
                  labels = labels)

df2$network = factor(df2$network,
                    network_names,
                    labels = network_names_full)

df2$method = factor(df2$method,
                    c("onestep", "onestep_iid", "ols"),
                    labels = c(tmle = "Network One-step", tmle_iid = "One-step (No Network)", ols = "Linear Regression (No Network)"))
```

```{r}
p3 = ggplot(df2) + 
  geom_hline(aes(yintercept = value), color = "gray", data = truthdf) + 
  geom_line(aes(x = samples, y = value, color = method), linewidth = 0.5) +
  geom_point(aes(x = samples, y = value, color = method)) +
  facet_grid(rows = vars(name), cols = vars(network), labeller=label_parsed, scales = "free_y") + 
  ylab("") + xlab("Sample Size") + labs(color = "") +
  scale_color_manual(values = c("#002e5c", "#ffa600", "#00aaf5")) + 
  theme(strip.background = element_rect("#EEEEEE", "#d1d1d1"), 
        strip.text = element_text(colour = 'black'), 
        legend.position = "bottom",legend.title=element_blank(), 
        legend.margin=margin(-10,0,0,0),
        panel.spacing = unit(15, "pt")) +
  scale_x_continuous(breaks = c(400, 900, 1600, 2500))

ggsave("sim-result-onestep.png", p1, path = here("results"), width = 6, height = 6)

p3
```

